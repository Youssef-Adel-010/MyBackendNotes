AppDbContext context = new();
List<Employee> employees1 = context.Employees.ToList();
List<Employee> employees2 = [.. context.Employees];

foreach (var employee in employees1)
{
   Console.WriteLine(employee.Name + " | " + employee.Salary);
}
=======================================================================

// selecting one item from database
AppDbContext context = new();

Employee? e1 = context.Employees.Find(1); // find using pk

Employee? e2 = context.Employees.Single(em => em.EmployeeId == 5); // select using a condition just return one and only one row 

Employee? e3 = context.Employees.SingleOrDefault(em => em.EmployeeId == 1000); // just return one row or null

Employee? e4 = context.Employees.First(); // select the first element

Employee? e5 = context.Employees.First(em => em.Name == "Alice Brown"); // select using a condition first element

Employee? e6 = context.Employees.FirstOrDefault(); // first element or null

Employee? e7 = context.Employees.OrderBy(em => em.EmployeeId).Last(); // last element but must use OrderBy()

Employee? e8 = context.Employees.OrderBy(em => em.EmployeeId).LastOrDefault(); // last element or null


=======================================================================

// EFCore filters the data in server side not in client side and send the filtered data.
// selecting using .Where()

AppDbContext context = new();
List<Employee>? employees1 = context.Employees.Where(em => em.Salary > 55000).ToList();
List<Employee>? employees2 = [.. context.Employees.Where(em => em.Salary > 55000)];

=======================================================================

// Any() and All()

AppDbContext context = new();
bool any1 = context.Employees.Any(); // if you found any row that matches the condition
bool any2 = context.Employees.Any(em => em.Name == "Quincy Brown"); // if you found any row that matches the condition

bool all1 = context.Employees.All(em => em.Name == "Quincy Brown"); // if all the rows matches the conditions
bool all2 = context.Employees.All(em => em.EmployeeId > 0);

=======================================================================

// Append() and Prepend()
// Done in client side
// They don't used to add elements to the database.
// They are just used to modify the output in your application.
AppDbContext context = new();

var employees = context.Employees
.Where(x => x.Salary > 55000)
.ToList()
.Prepend(new Employee { Name = "Shahd Osama", Salary = 15500, Department = "HR" });

=======================================================================

AppDbContext context = new();

// Average()
decimal? avg = context.Employees.Where(x => x.Salary > 55000).Average(x => x.Salary);

// Count()
long count1 = context.Employees.LongCount();
int count2 = context.Employees.Count();
int count3 = context.Employees.Count(x => x.Salary > 55000);

// Sum()
var sum1 = context.Employees.Sum(x => x.Salary);
var sum2 = context.Employees.Where(x => x.Salary > 55000).Sum(x => x.Salary);

// Min() Max()
var max = context.Employees.Max(x => x.Name);
         
=======================================================================

// OrderBy() and OrderByDescending()
List<Employee> employees = [.. context.Employees
   .OrderBy(x => x.Name)
   .ThenBy(x => x.Salary)
   .ThenBy(x => x.Department)];

=======================================================================

// Selecting specific rows or parsing types and adding alias using Select()
var employees = context.Employees
   .Select(x => new { TheEmployeeName = x.Name})
   .ToList();

=======================================================================

// Distinct() works on all columns, all columns must be identical
// If you want to make it for specific columns use Select()
var employees = context.Employees
   .Select(x => new { x.Name })
   .OrderBy(x => x.Name)
   .Distinct()
   .ToList();

=======================================================================

// Skip() and Take() used in pagination

var employees1 = context.Employees.Skip(10).ToList();
var employees2 = context.Employees.Take(10).ToList();
var employees3 = context.Employees.Skip(10).Take(10).ToList();

// application

public static void Main(string[] args)
{
   List<Employee> pages = GetPageData(2, 20);
   foreach (var page in pages)
   {
      Console.WriteLine(page.EmployeeId);
   }

}
static List<Employee> GetPageData(int pageNum, int pageSize)
{
   AppDbContext context = new();
   return [.. context.Employees.Skip((pageNum - 1) * pageSize).Take(pageSize)];
}

=======================================================================

// GroupeBy()
AppDbContext context = new();
var employees = context.Employees
   .GroupBy(x => x.Department)
   .Select(x => new
   {
      Department = x.Key,
      Count = x.Count(),
      Sum = x.Sum(x => x.Salary),
      Avg = x.Average(x => x.Salary)
   })
   .OrderByDescending(x => x.Count);

foreach (var i in employees)
{
   Console.WriteLine($"{i.Department} => {i.Count} * {i.Sum} * {i.Avg}");
   Console.WriteLine("============================================");
}
/*
   HR => 24 * 1311000.00 * 54625.000000
   ============================================
   Marketing => 21 * 1183000.00 * 56333.333333
   ============================================
   Sales => 21 * 1190000.00 * 56666.666666
   ============================================
   IT => 15 * 802000.00 * 53466.666666
   ============================================
   Engineering => 14 * 770000.00 * 55000.000000
   ============================================
   Finance => 14 * 756000.00 * 54000.000000
   ============================================
   CS => 1 * 77000.00 * 77000.000000
   ============================================
*/

=======================================================================
// Search for joining in EFCore you don't understand
// Inner Join with Join() 
AppDbContext context = new();

var books = context.Books
.Join(
   context.Authors,
   book => book.AuthorId,
   author => author.Id,
   (book, author) => new
   {
      BookId = book.Id,
      BookName = book.Name,
      AuthorId = author.Id,
      AuthorName = author.Name,
      AuthorNationalityId = author.NationalityId
   }
) // the return of the first join is the anonyms object
.Join(
   context.Nationalities,
   anonyms => anonyms.AuthorNationalityId,
   nationality => nationality.Id,
   (anonyms, nationality) => new
   {
      anonyms.BookId,
      anonyms.BookName,
      anonyms.AuthorId,
      anonyms.AuthorName,
      AuthorNationality = nationality.Name
   }
);
foreach (var book in books)
{
   Console.WriteLine($"{book.BookId} - {book.BookName} - {book.AuthorId} - {book.AuthorName} - {book.AuthorNationality}");
}
/*
   1 - Book 1 - 8 - Ashraf Salah - Russian
   2 - Book 2 - 7 - Hagar Ismaiel - Egyptian
   3 - Book 3 - 1 - Youssef Adel - Russian
   4 - Book 4 - 2 - Shahd Osama - Italian
   5 - Book 5 - 3 - Moataz Mohammed - British
   6 - Book 6 - 4 - Ayman Adel - Palestinian
   7 - Book 7 - 6 - Hoda Tohamy - Italian
*/

=======================================================================

