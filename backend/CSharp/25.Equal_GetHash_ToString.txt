----------------------------
→ Equal() and GetHashCode():
----------------------------
The default [ == ] or [ .Equals() ] compare by reference (memory address).
Ex:
----
namespace program
{
   class Employee
   {
      public string? Name { get; set; }
      public double Salary { get; set; }
   }
   class Program
   {
      public static void Main(string[] args)
      {
         Employee e1 = new Employee
         {
            Name = "Youssef", Salary = 5000
         };
         Employee e2 = new Employee
         {
            Name = "Youssef", Salary = 5000
         };
         Employee e3 = e1;
         System.Console.WriteLine(e1 == e2);      // false
         System.Console.WriteLine(e1.Equals(e2)); // false
         System.Console.WriteLine(e1 == e3);      // True
      }
   }
}
--------------------------------------------------------------------------------------------------------------
→ But how to override them to compare the content??
---------------------------------------------------
namespace program
{
   class Employee
   {
      public string? Name { get; set; }
      public double Salary { get; set; }
      public override bool Equals(object? obj)
      {
         if (obj == null || obj is not Employee)
            return false;
         Employee? emp = obj as Employee; // Employee? emp = obj (Employee)obj;
         return this.Name == emp?.Name && this.Salary == emp?.Salary;
      }
      public static bool operator ==(Employee lhs, Employee rhs) => lhs.Equals(rhs);
      public static bool operator !=(Employee lhs, Employee rhs) => !lhs.Equals(rhs);
   }
   class Program
   {
      public static void Main(string[] args)
      {
         Employee e1 = new Employee
         {
            Name = "Youssef", Salary = 5000,
         };
         Employee e2 = new Employee
         {
            Name = "Youssef", Salary = 5000,
         };
         Employee e3 = e1;
         System.Console.WriteLine(e1 == e2);      // True
         System.Console.WriteLine(e1.Equals(e2)); // True
         System.Console.WriteLine(e1 == e3);      // True

      }
   }
}
------------
another way:
------------
public override bool Equals(object? obj)
{
   if (((Employee)obj).Name == this.Name && ((Employee)obj).Salary == this.Salary)
      return true;
   return false;
}
// but it is better to check for the type.
--------------------------------------------------------------------------------------------------------------
And you wil need to override GetHashCode():
-------------------------------------------
namespace program
{
   class Employee
   {
      public string? Name { get; set; }
      public double Salary { get; set; }
      public override bool Equals(object? obj)
      {
         if (obj == null || obj is not Employee)
            return false;
         Employee? emp = (Employee)obj; // Employee? emp = obj as Employee; 
         return this.Name == emp?.Name && this.Salary == emp?.Salary;
      }
      public override int GetHashCode()
      {
         return base.GetHashCode();
      }
      public static bool operator ==(Employee lhs, Employee rhs) => lhs.Equals(rhs);
      public static bool operator !=(Employee lhs, Employee rhs) => !lhs.Equals(rhs);
   }
   class Program
   {
      public static void Main(string[] args)
      {
         Employee e1 = new Employee
         {
            Name = "Youssef",
            Salary = 5000,
         };
         Employee e2 = new Employee
         {
            Name = "Youssef",
            Salary = 5000,
         };
         Employee e3 = e1;
         System.Console.WriteLine(e1 == e2); // True, you overrode it.
         System.Console.WriteLine(e1.Equals(e2)); // True, you overrode it.
         System.Console.WriteLine(e1 == e3); // True, it compares reference

      }
   }
}
// if two objects Equal they will return the same hash code
// but if they have the same hash this don't mean that they are Equal.
--------------------------------------------------------------------------------------------------------------
Overriding ToString():
----------------------
namespace program
{
   class Employee
   {
      public string? Name { get; set; }
      public int Salary { get; set; }
      public Employee(string Name, int Salary)
      {
         this.Name = Name;
         this.Salary = Salary;
      }
      public override string ToString()
      {
         return $"Name => {this.Name}\nSalary => {this.Salary}";
      }
   }
   class Program
   {
      public static void Main(string[] args)
      {
         Employee employee = new("Ahmed", 5000);
         System.Console.WriteLine(employee.ToString());
      }
   }
}
=======================================================================================================